import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
import { NavBar, SidePanelAdmin } from '../components';
import Toastify from 'toastify-js';
import "toastify-js/src/toastify.css";

function QuizPage() {
    const [quiz, setQuiz] = useState([]);
    const [selectedAnswers, setSelectedAnswers] = useState({});
    const { user } = useAuth();
    const { courseId, chapterId, subchapterId } = useParams();

    useEffect(() => {
        const fetchQuiz = async () => {
            try {
                const response = await axios.get(`http://127.0.0.1:8000/api/course/${courseId}/chapter/${chapterId}/subchapter/${subchapterId}/quiz/`);
                setQuiz(response.data);
            } catch (error) {
                console.error("Error fetching quiz:", error);
            }
        };

        fetchQuiz();
    }, [courseId, chapterId, subchapterId]);

    const handleAnswerSelect = (questionIndex, answerIndex) => {
        setSelectedAnswers(prevState => ({
            ...prevState,
            [questionIndex]: answerIndex
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        // Prepare the data
        const data = {
            selectedAnswers
        };

        try {
            // Send POST request
            const response = await axios.post(`http://127.0.0.1:8000/api/course/${courseId}/chapter/${chapterId}/subchapter/${subchapterId}/submit-quiz/`, data, {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${user.accessToken}` // Add authorization header if required
                }
            });

            if (response.status === 200) {
                Toastify({
                    text: "Quiz submitted successfully",
                    duration: 3000,
                    close: true,
                    gravity: "top",
                    position: "right",
                    style: {
                        background: "rgba(2, 51, 141, 0.4)",
                        borderRadius: "10px",
                        fontSize: "15px", // Increase font size
                        padding: "15px",  // Increase padding
                    },
                }).showToast();
            }
        } catch (error) {
            console.error("Error submitting the quiz:", error);
            const errorMessage = error.response?.data?.message || "Failed to submit quiz, please try again.";
            Toastify({
                text: errorMessage,
                duration: 3000,
                close: true,
                gravity: "top",
                position: "right",
                style: {
                    background: "rgba(128, 0, 0, 0.4)",
                    borderRadius: "10px",
                    fontSize: "15px", // Increase font size
                    padding: "15px",  // Increase padding
                },
            }).showToast();
        }
    };

    const navbarProps = {
        isLoggedIn: !!user,
        username: user?.username,
    };

    return (
        <div>
            <NavBar {...navbarProps} />
            <div className="flex">
                <SidePanelAdmin />
                <div className="container mx-auto p-4">
                    <h2 className="text-xl font-semibold mb-4">Quiz</h2>
                    <form className="space-y-4" onSubmit={handleSubmit}>
                        {quiz.map((q, questionIndex) => (
                            <div key={questionIndex} className="space-y-2">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700">
                                        {q.question}
                                    </label>
                                    {q.answers.map((answer, answerIndex) => (
                                        <div key={answerIndex} className="ml-4">
                                            <input
                                                type="radio"
                                                id={`question-${questionIndex}-answer-${answerIndex}`}
                                                name={`question-${questionIndex}`}
                                                value={answerIndex}
                                                checked={selectedAnswers[questionIndex] === answerIndex}
                                                onChange={() => handleAnswerSelect(questionIndex, answerIndex)}
                                                className="mr-2"
                                            />
                                            <label htmlFor={`question-${questionIndex}-answer-${answerIndex}`} className="text-sm font-medium text-gray-700">
                                                {answer}
                                            </label>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        ))}

                        <button
                            type="submit"
                            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        >
                            Submit
                        </button>
                    </form>
                </div>
            </div>
        </div>
    );
}

export default QuizPage;
